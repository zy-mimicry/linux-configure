;; -*- mode: emacs-lisp -*-
(require 'sawfish-defaults)
(require 'sawfish.wm.menus)

(custom-set-typed-variable (quote wm-modifier-value)
			   (quote (super))
			   (quote modifier-list))

(custom-set-typed-variable (quote focus-mode)
			   (quote enter-only)
			   (quote symbol))

(custom-set-typed-variable (quote place-window-mode)
			   (quote first-fit)
			   (quote symbol))

(defun wy-run (cmd)
  "Run a command in a new process. And let it start in
background. Without stop the current WM execution"
  (interactive)
  (system
   (if (string-match ".*&\\s*$" cmd)
       cmd
     (concat cmd " &"))))

(defun wy-cleanup-on-exit ()
  (mapc stop-process (active-processes)))

(add-hook 'before-exit-hook 'wy-cleanup-on-exit)

(defun require-try (#!rest args)
  (let ((result t))
    (mapc
     (lambda (e)
       (condition-case err
           (cond ((stringp e) (load-file e))
                 ((symbolp e) (require e))
                 (t (format standard-output
                            "Invalid arg to require-try: %s" e)
                    (setq result nil)))
         (file-error
          (format standard-output "Couldn't load extension: %s" e)
          (setq result nil))))
     args)
    result))


;; this function is used a bit further in, in my local config. i use it to blur
;; the line between what's running and what needs to be started, so i can hit a
;; key to load something, or jump to it if it was already running. i love
;; sawfish.
(defun jump-or-exec (re prog #!optional onfocused)
  "jump to a window matched by re, or start program otherwise."
  (catch 'return
    (let ((wind (get-window-by-name-re re)))
      (if (functionp onfocused) ; check if already focused
          (let ((curwin (input-focus)))
            (if curwin
                (if (string-match re (window-name curwin))
                    (progn
                      (funcall onfocused wind)
                      (throw 'return))))))
      (if (windowp wind)
          (display-window wind)
        (if (functionp prog)
            (funcall prog)
          (system (concat prog "&")))))))

;; global manipulations
(bind-keys global-keymap
	   ;; system relative
	   "W-o" 'restart
	   ;; "W-F12" '(run-shell-command "xscreensaver-command -lock")

	   ;; active worksapce
	   "W-1" '(activate-workspace 1)
	   "W-2" '(activate-workspace 2)
	   "W-3" '(activate-workspace 3)
	   "W-4" '(activate-workspace 4)

	   ;;jump or exec
	   "W-t" `(jump-or-exec "term " "gnome-terminal")
	   "W-e" `(jump-or-exec "emacs " "emacs")
	   "W-f" `(jump-or-exec "Pentadactyl" "firefox")
	   ;; "W-RET" `(jump-or-exec "Terminal" "gnome-terminal -e screen")
	   "W-RET" `(jump-or-exec "Terminal" "gnome-terminal")
	   "W-s" `(jump-or-exec "StarDict" "stardict")
)

;; Window manipulations
(bind-keys window-keymap

           ;; Move to an edge
           "W-k" 'pack-window-up
           "W-j" 'pack-window-down
           "W-h" 'pack-window-left
           "W-l" 'pack-window-right

           ;; move window to worksapce
           "W-!" '(send-to-workspace 1)
           "W-@" '(send-to-workspace 2)
           "W-#" '(send-to-workspace 3)
           "W-$" '(send-to-workspace 4)

           ;; maxmize the window
           "W-m" 'maximize-fill-window-toggle
           "W-X" '(delete-window (current-event-window)))
